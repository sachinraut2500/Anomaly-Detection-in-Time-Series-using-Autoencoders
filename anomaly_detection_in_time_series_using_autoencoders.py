# -*- coding: utf-8 -*-
"""Anomaly Detection in Time Series using Autoencoders.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pKYgrwW1BbCxeOcU-7lO2w31ebT7-_yO
"""

# anomaly_detection_autoencoder.py

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, RepeatVector, TimeDistributed, Dense
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import classification_report

# Set random seeds
np.random.seed(42)
tf.random.set_seed(42)

# Load dataset
def load_data():
    # Replace this with your actual CSV file path
    df = pd.read_csv('sensor.csv', parse_dates=['timestamp'], index_col='timestamp')
    return df

# Preprocess data
def preprocess(df, seq_length):
    scaler = MinMaxScaler()
    data_scaled = scaler.fit_transform(df)

    X = []
    for i in range(len(data_scaled) - seq_length):
        X.append(data_scaled[i:i+seq_length])

    X = np.array(X)
    return X, scaler

# Define Autoencoder
def create_model(seq_length, n_features):
    model = Sequential([
        LSTM(64, activation='relu', input_shape=(seq_length, n_features), return_sequences=False),
        RepeatVector(seq_length),
        LSTM(64, activation='relu', return_sequences=True),
        TimeDistributed(Dense(n_features))
    ])
    model.compile(optimizer='adam', loss='mse')
    return model

# Detect anomalies
def detect_anomalies(model, X, threshold):
    X_pred = model.predict(X)
    mse = np.mean(np.power(X - X_pred, 2), axis=(1, 2))
    anomalies = mse > threshold
    return anomalies, mse

# Main
def main():
    SEQ_LEN = 30

    df = load_data()
    print("Loaded Data:", df.shape)

    X, scaler = preprocess(df[['value']], SEQ_LEN)
    split = int(0.8 * len(X))

    X_train, X_test = X[:split], X[split:]
    model = create_model(seq_length=SEQ_LEN, n_features=1)

    model.fit(X_train, X_train, epochs=20, batch_size=32, validation_split=0.1, shuffle=True)

    # Reconstruction loss on training data
    X_train_pred = model.predict(X_train)
    mse_train = np.mean(np.power(X_train - X_train_pred, 2), axis=(1, 2))
    threshold = np.percentile(mse_train, 95)
    print(f"Anomaly threshold (95th percentile): {threshold}")

    # Predictions
    anomalies, mse_test = detect_anomalies(model, X_test, threshold)

    # Plot results
    plt.figure(figsize=(15, 5))
    plt.plot(mse_test, label='Reconstruction Error')
    plt.hlines(threshold, xmin=0, xmax=len(mse_test), colors='red', label='Threshold')
    plt.legend()
    plt.title("Reconstruction Error on Test Set")
    plt.show()

    print("Anomalies detected:", np.sum(anomalies))

if __name__ == "__main__":
    main()